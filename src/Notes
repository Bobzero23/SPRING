SET UP
+ Start a new Maven Project
+ Put the dependency of IoC Container of your choice (Context Application) you can find it in maven webpage
Then you're ready to go.

IOC(INVERSION OF CONTROL)
Software Design Principle, instead of a programmer creating the objects the framework for them.

LOOSE COUPLING
It means each class and object is independent and the less classes have knowledge about other class the loose they are.

BEAN
A plain Java class which is maintained by Spring Framework.

IoC CONTAINER
It is the container responsible for life time of beans with the help of annotations we make or the xml configs and also
injects the required dependencies.

TYPES OF IoC CONTAINERS
+ Bean Factory
+ Context Application

CONTEXT
Memory location of the web application where all the bean's information and dependencies are being maintained.

spEL(SPRING EXPRESSION LANGUAGE)
The Strong expression language for querying and manipulating object graph at runtime like setting and getting
property values.

PROJECT CONFIG CLASS
Is the class which has definitions of beans with the annotation of @Configuration

** CHECK EXAMPLE1

NO UNIQUE BEAN DEFINITION EXCEPTION
This happens when you have call the method get bean from the data type which has multiple beans and without specifying
which bean exactly you want and to avoid it, you can pass two parameter to the get bean method to specify the bean name
also you can use the @Primary

@COMPONENT
Instead of creating bean of the class inside the ProjConfig Class we simply use this annotation and we wont have to use
bean while creating method of the type of this class, Spring will handle the rest, And if you gonna use this then you
will have to put the @ComponentScan(basePackages = "NameOfThePackageWhichHasTheComponentAnnotation")


+ BEAN NAMES ARE NORMALLY NOUN AND NOT VERBS
+ YOU CAN NOT CREATE A BEAN USING AN INTERFACE, ONLY CLASSES.

STEREOTYPE ANNOTATION
+ @Component -> It is the base for other annotation
+ @Service -> In this class we put Business logics and we can make external API's
+ @Repository -> Classes for the database
+ @Controller -> Used in Spring MVC to redirect the html page

@PostConstruct ANNOTATION
We use this above the method to gain the control when we use the @Component above the class and inside the method with
@PostConstruct Annotation we use the keyword this which we refer to the bean which is going to be created.

BEANS WITH XML
1. I had to create xml file manually myself while learning how to create beans using xml file
2. In this section we created the connection with the bean using xml so better check the xml file in resources
3. Here the xml file acts as the Pojo class
3. In the main method we have to use another way of creating object of IoC Container go check it
and there you pass the name of the xml file folder you created

AUTOWIRED
1. Can be used on top of the setter, constructor or class fields
2. This is an example of Dependency Injection (Dynamic)
3. We initialized the component annotation on top of the pojo classes to make things easier
4. This method is not recommended because you can't initialize a autowired field as final but still most
   developers almost 99% of developers are using this because it is easy to use ..
5. Use this method with annotation on the constructor that's the better way because it allows finals fields

AUTO WIRING DEEP DIVING
1. When we use @autowired with constructor we might have more than one pojo class and we might have more than one
   beans and in case sometimes they might have the same name, which lead us to NoUnique error but as we know we use
   the @primary annotation we might get rid of that error, if we don't have it there are more steps which Spring follows
   to check before giving the error check the codes.

QUALIFIER ANNOTATION
1. We use this annotation when we use @autowired annotation and when we want to get a bean using their name so
   we use this annotation to pass the name.

CIRCULAR DEPENDENCY
1. This happens when a programmer create two @autowired annotation in both two pojo class in that case the Spring
   will not know which bean should be first created and both bean will wait for other bean to be created, and
   such a scenario will display a UnsatisfiedDependencyException, and hey there is no solution for it you gonna
   have to avoid this thing from the beginning hhhh.

5 TYPES OF SCOPE IN BEAN -> @Scope(BeanDefinition.SCOPE_PROTOTYPE)
1. Singleton -> Default Scope in Spring also commonly used
2. Prototype
3. Request
4. Session
5. Application

SINGLETON BEAN SCOPE
1. This one creates only one a object for all application, even you create another object that object will refer to this

RACE CONDITION
This happens when two threads trying to reach the same shared variable

EAGER AND LAZY INITIALIZATION
This concept is only valid in SINGLETON
1. Eager is when you run the Spring program all the beans are being created first before everything else
2. Lazy is when the bean is being created at the time you want to use a particular bean

PROTOTYPE BEAN SCOPE
This one creates a new object everytime a bean is called or created

Note: Do not create a bean on Pojo class if they only have getters and setters, they shall have business logic at least.

AOP (ASPECT ORIENTED PROGRAMMING) -> the point is to to move all the non-functional to one class which we can call it
    aspects so that it will be easier to maintain.. We can normally do this

ASPECT
1. A piece of code you want to execute when you call your business logic methods

ADD LIBRARIES TO USE THE AOP -> dependency

AOP JARGON'S
1. WHAT -> Aspect -> what code or logic we want to execute
2. WHEN  -> Advice -> when we want to execute it
3. WHICH -> Pointcut -> which method we wanna use with it
Point cut -> method call
Target object -> the bean class

WEAVING INSIDE AOP
When we implement AOP inside our app, Spring intercept each method according to the logic in our Aspect. Instead of
giving the reference of a method it gives a proxy object that will manage each call.

CONFIGURING ADVICES INSIDE AOP
1. We can use the AspectJ pointcut to tell the spring which methods need to be intercepted
2. We need to enable the Aspect Proxy on our configuration class
3. Creating a bean class which will also be the Aspect class fot the logger
4. Inside the Aspect Class we create a method which will have aspect logic
5. To tell spring which method to intercept we use aspect advices such as @Around @Before and configuring it.

Type of advices in Spring AOP
@Before -> runs before the actual java method invocation
@AfterReturning -> runs after the program finish the execution successfully
@AfterThrowing -> runs when something wrong happened like telling the user that something happened
@After -> runs after but accordingly
@Around -> Combination of @After and @Before

TO WORK WITH AOP YOU MUST USE @Enable.. annotation on the project configuration class to enable the features

WEB APPLICATIONS

SERVLET CONTAINER
Takes the http protocol messages and convert to servlet object related request